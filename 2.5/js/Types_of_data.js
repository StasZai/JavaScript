// Типы данных

// Число

let n = 123;
n = 12.345;


// BigInt -- возможность работать с целыми числами произвольной длины.
// необходимо добавить n в конец числового литерала:

const bigInt = 1234567890123456789012345678901234567890n;


// Строка
// Строка (string) в JavaScript должна быть заключена в кавычки:

let str = "Привет";
let str2 = 'Одинарные кавычки тоже подойдут';
let phrase = `Обратные кавычки позволяют встраивать переменные ${str}`;


// Обратные же кавычки имеют расширенную функциональность. 
// Они позволяют нам встраивать выражения в строку, заключая их в ${…}. Например:

let name = "Иван";

alert(`Привет ${name}!`);


// Булевый (логический) тип

// Булевый тип (boolean) может принимать только два значения: true (истина) и false (ложь).

let nameFieldChecked = true; // да, поле отмечено
let ageFieldChecked = false; // нет, поле не отмечено

// Булевые значения также могут быть результатом сравнений:

let isGreater = 4 > 1;

alert( isGreater );


// Значение «null»

// Специальное значение null не относится ни к одному из типов, описанных выше.

let age = null;


// Значение «undefined»

// Специальное значение undefined оно означает, что «значение не было присвоено».

let undef;

alert(undef); // выведет "undefined"



// Оператор typeof

// Оператор typeof возвращает тип аргумента. Это полезно, когда мы хотим обрабатывать значения 
// различных типов по-разному или просто хотим сделать проверку.

alert(typeof undefined);

alert(typeof 5);

alert(typeof 10n);

alert(typeof true);

alert(typeof "foo");

alert(typeof Symbol("id"));

alert(typeof Math);

alert(typeof null);

alert(typeof alert);